module ActiveRecord
  class StatementInvalid < StandardError
  end

  class Base
    def self.ignored_columns=: (Array[(Symbol | String)]) -> Array[Symbol]
                             
    def self.ignored_columns: () -> Array[Symbol]

    def self.connection: () -> ActiveRecord::ConnectionAdapters::PostgreSQLAdapter

    def self.transaction: (requires_new: bool?) { () -> untyped } -> untyped
                        
    def self.connection_db_config: () -> ActiveRecord::DatabaseConfigurations::HashConfig       
  end

  class DatabaseConfigurations
    class HashConfig
      def configuration_hash: () -> Hash[Symbol, untyped]
   
      def name: () -> String
    end
  end

  module Migration
    class CommandRecorder
      def self.included: (Class) -> void
    end
  end

  module Generators
    class ModelGenerator < ::Rails::Generators::Base
      def self.class_option: (Symbol, ?Hash[Symbol, untyped]) -> void
                           
      def check_class_collision: () -> void

      @class_coalescing: bool

      def destination_root: () -> String

      def attributes: () -> Array[ActiveRecord::Generators::Attribute]
                    
      def options: () -> Hash[Symbol, untyped]
                 
      def database: () -> String
                  
      def file_name: () -> String
                   
      def class_path: () -> String
                    
      def migration_template: (String, ?String) -> void
                            
      def table_name: () -> String
                    
      def skip_migration_creation?: () -> bool
                                  
      def custom_parent?: () -> bool
    end

    class Attribute
      # a.attr_options.delete(:index) if a.reference? && !a.has_index?
      def has_index?: () -> bool

      def attr_options: () -> Hash[Symbol, untyped]

      def reference?: () -> bool
    end
  end

  module ConnectionAdapters
    class AbstractAdapter
      def rollback_db_transaction: () -> void
    end

    class PostgreSQLAdapter < AbstractAdapter
      def execute: (String) -> untyped
    end
    module PostgreSQL
      class SchemaStatements
      end

      class SchemaDumper
      end
    end
  end
end
